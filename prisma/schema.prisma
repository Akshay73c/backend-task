// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  status      Boolean   @default(true)
  Product     Product[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  price         Int
  description   String?
  image         String?
  specification String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Order         Order[]
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    Int
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String?
  Lastname  String?
  addresses Address[]
  orders    Order[]
}

model Order {
  id          Int      @id @default(autoincrement())
  description String?
  type        String   @default("COD")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address     Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   Int
  userId      Int
  addressId   Int
}

model Address {
  id      Int     @id @default(autoincrement())
  street  String?
  city    String
  state   String
  country String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  orders  Order[]
}
